[build-system]
build-backend = "poetry.core.masonry.api"
requires = [ "poetry-core>=2,<3" ]

[project]
name = "bacon"
version = "0.1.0"
description = "CLI client to Bacon Ipsum public API."
readme = "README.md"
keywords = [ "api", "bacon", "http", "ipsum", "lorem" ]
license = { text = "MIT" }
authors = [
  { name = "Jesse Butcher", email = "boweeb@gmail.com" },
]
requires-python = ">=3.13,<4"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
]

urls.Documentation = "https://github.com/boweeb/bacon"
urls.Homepage = "https://github.com/boweeb/bacon"
urls.Repository = "https://github.com/boweeb/bacon"

# dynamic = ["version", "readme", "classifiers"] # Example if you want Poetry to manage these dynamically

scripts.bacon = "bacon.cli.entry:main"

dependencies = [
    "requests >=2.32,<3",
    "click >=8.1,<9",
    "click-aliases >=1.0,<2",
    "rich >=14.0,<15",
    "alive-progress >=3.2,<4",
    "cerberus >=1.3,<2",
    "returns >=0.25,<1",
]

[tool.poetry]
requires-poetry = ">=2.1"
packages = [ { include = "bacon", from = "src" } ]
include = [ { path = "tests", format = "sdist" } ]

[tool.poetry.group.dev.dependencies]
bpython = "*"
ipython = "^8.16.1"

[tool.poetry.group.test.dependencies]
coverage = "^7.3"
pytest = "^7.4"
pytest-cov = "^4.1"
faker = "^19.11"
hypothesis = "^6.88"
#pytest-bdd = "*"

[tool.poetry.group.lint.dependencies]
mypy = "*"
black = "*"
isort = "*"
pylint = "*"
types-requests = "^2.31"
#pylama = "*"
#flake8 = "*"
ruff = "^0.5.0"

[tool.poetry.group.play]
optional = true

[tool.poetry.group.play.dependencies]
ipdb = "*"
snoop = "*"
birdseye = "*"
#pdoc3 = "*"


[tool.black]
line-length = 120

[tool.ruff]
target-version = "py313"
line-length = 120

# "full" | "concise" | "grouped" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure"
output-format = "grouped"
lint.select = [
  "B", # flake8-bugbear
  "C", # mccabe complexity
  "E", # pycodestyle errors
  "F", # Pyflakes
  "I", # isort
  "W", # pycodestyle warnings
]
lint.ignore = [  ]
lint.isort.lines-after-imports = 2
lint.pydocstyle.convention = "google"

[tool.isort]
profile = "black"
line_length = 120
atomic = true
lines_after_imports = 2

[tool.pylint.format]
max-line-length = 120

[tool.pytest.ini_options]
addopts = [ "--strict-config", "--strict-markers", "-ra" ]
xfail_strict = true

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
python_version = "3.13"
platform = "linux"

# Magic combination for namespace-package under src/
namespace_packages = true
mypy_path = "src"
explicit_package_bases = true

# flake8-mypy expects the two following for sensible formatting
#show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
#ignore_missing_imports = true

# be strict
disallow_untyped_calls = true
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true

# The following are off by default.  Flip them on if you feel adventurous.
disallow_untyped_defs = true
check_untyped_defs = true

# No incremental mode
#cache_dir = "/dev/null"

disallow_any_generics = true

plugins = [
  # "pydantic.mypy",
  "returns.contrib.mypy.returns_plugin",
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
